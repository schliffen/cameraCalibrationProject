#
#
#
import numpy as np


cal3dPtLs = np.array([
      [ 42.498349, -90.688198 ],
      [ 42.498338, -90.688232 ],
      [ 42.498229, -90.688179 ],
      [ 42.498231, -90.688216 ],
      [ 42.498205, -90.688171 ],
      [ 42.498248, -90.688020 ],
      [ 42.498221, -90.688014 ],
      [ 42.498253, -90.687983 ],
      [ 42.498368, -90.688038 ],
      [ 42.498369, -90.688001 ]
    ])

cal2dPtLs = np.array([
      [ 1045, 893 ],
      [ 1576, 969 ],
      [ 1593, 415 ],
      [ 1802, 471 ],
      [ 1608, 379 ],
      [ 845, 290 ],
      [ 941, 271 ],
      [ 711, 278 ],
      [ 126, 480 ],
      [ 73, 436 ]
    ])


calMeasLnSegNdPt= np.array([
      [ 1224, 145 ], [ 1235, 155 ],
      [ 1259, 501 ], [ 1295, 559 ],
      [ 1289, 310 ], [ 1269, 287 ],
      [ 494, 716 ], [ 546, 626 ],
      [ 439, 307], [ 466, 285 ],
      [ 697, 168 ], [ 706, 157],
      [ 1499, 196 ], [ 1582, 197 ],
      [ 1093, 712 ], [ 1374, 703 ],
      [ 1286, 310 ], [ 1412, 303 ],
      [ 1155, 97 ], [ 1211, 93 ],
      [ 528, 367 ], [ 683, 380 ],
      [ 131, 802 ], [ 441, 828 ],
      [ 754, 63 ], [ 810, 61 ]
    ])

calMeasLnSegDist = [ 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 3.6576, 3.6576, 3.6576, 3.6576, 3.6576, 3.6576, 3.6576 ] # real distance

K =  np.array([[2765.8630371, 0.0000000, 934.0297852],[0.0000000, 3154.6831055, 519.1398926], [0.0000000, 0.0000000, 1.0000000]])
R =  np.array([[0.9999810, -0.0033191, 0.0057687], [0.0052255, -0.1988263, -0.9800208], [0.0032567, 0.9800324, -0.1988113]])
T =  np.array([[0.0000000], [0.0000000], [8837.6103516]])
Pr =  np.array([[2768.8522949, 906.1993408, -169.7402191, 1500098.0000000], [18.1755505, -118.4600525, -3194.8659668, 28234980.0000000], [0.0032567, 0.9800324, -0.1988113, 1757.0166016]])
Homography_matrix = np.array([[-21.997591847327296, -3.745927127290156, 595.151212291002253], [0.048533439450522, -0.279593223283112, -27.417364958786596], [-0.009519266410793, 0.006565856902287, 1.000000000000000]])

if __name__ == "__main__":
    
    # reconstructing 3d from 2d data based on homography
    #d2point = np.array([[1045], [893], [1] ])
    #d3point = Homography_matrix * d2point
    #print("3dpoint", d3point)

  
  Rt = np.hstack((R,T))
  error = np.linalg.norm( Pr - np.matmul(K,Rt) )

  P2d3 = np.linalg.inv(Pr)

  a = np.matmul (P2d3, np.array([[1224],[145],[0], [0]]) ) 
  b = np.matmul (P2d3, np.array([[1235],[ 155],[0], [0]]) ) 
  dist = np.linalg.norm(a-b)